local Player = game:GetService("Players").LocalPlayer
local RP = game:GetService("ReplicatedStorage")
local Block = RP:WaitForChild("Block")
local StunEvent = RP:WaitForChild("Stun")

local UIS = game:GetService("UserInputService")
local isBroken = script.Parent:WaitForChild("isBroken")
local isHit = script.Parent:WaitForChild("isHit")
local isCharging = script.Parent:WaitForChild("isCharging")

local isActive = false
local debounce = false
local cd = 3

--/Button is pressed
UIS.InputBegan:Connect(function(input,isTyping)
	if isTyping then 
		return 
	elseif input.KeyCode == Enum.KeyCode.Q then 
		if debounce == false and isBroken.Value == false and isHit.Value == false and isCharging.Value == false then
			if isActive == false then
				isActive = true
				
				Block:FireServer(isActive)
				warn("Block Server1 fired")
			end
		end
		
	end
	
end)

--/Button is released
UIS.InputEnded:Connect(function(input,isTyping)
	if isTyping then 
		return 
	elseif input.KeyCode == Enum.KeyCode.Q then 
		if debounce == false and isBroken.Value == false and isHit.Value == false and isCharging.Value == false then
			if isActive == true then
				isActive = false
				debounce = true

				Block:FireServer(isActive)
				warn("Block Server2 fired")
			end
		end

	end

end)

Block.OnClientEvent:Connect(function()
	wait(cd)
	debounce=false
end)


StunEvent.OnClientEvent:Connect(function()
	--[==[
	Note: this is dangerous to have on the client side, but I couldnt find
	how to lock player controls from server side so it's here for now
	]==]--

	isBroken.Value = true
	local playerModule = Player.PlayerScripts:WaitForChild("PlayerModule")
	local controls = require(playerModule):GetControls()
	controls:Disable()
	wait(3)
	controls:Enable()
	isBroken.Value = false
end)
